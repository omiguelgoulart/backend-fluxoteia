generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                Int       @id @default(autoincrement())
  nome              String
  email             String    @unique
  senha             String
  resetToken        String?
  resetTokenExpires DateTime?
  bloqueado         Boolean   @default(false)
  bloqueadoAte      DateTime?
  tentativasLogin   Int?      @default(0)
  logs              Log[]

  @@map("usuarios")
}

model Log {
  id          Int      @id @default(autoincrement())
  descricao   String   @db.VarChar(60)
  complemento String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  usuarioId   Int
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("logs")
}

model Despesas {
  id          Int      @id @default(autoincrement())
  date        DateTime? @default(now())
  number      String?
  description String?
  account     ACCOUNT?
  category    CATEGORY?
  subcategory String?
  amount        Float?
  status      STATUS?
  movimentacao Movimentacoes?

  @@map("despesas")
}

enum ACCOUNT {
  CRESSOL
  BANRISUL
  IFOOD
  STONE
  CAIXA_FISICO
}

enum STATUS {
  PENDENTE
  PAGO
}

enum CATEGORY {
  CUSTOS_OPERACAO
  DESPESAS_FIXAS
  DESPESAS_VARIAVEIS
  DESPESAS_ADMINISTRATIVAS
  OUTRAS_DESPESAS
  IMPOSTOS_CONTRIBUICOES
  OUTRAS_RECEITAS
}


model Entrada {
  id             Int      @id @default(autoincrement())
  data           DateTime @default(now()) // Data da entrada
  dinheiro       Float?   // Valor em dinheiro
  debito         Float?   // Valor no débito
  pix            Float?   // Valor via PIX
  ifood          Float?   // Valor vindo do iFood
  credito        Float?   // Valor no crédito
  maquinaCredito Float?   // Valor associado à máquina de crédito
  maquinaDebito  Float?   // Valor associado à máquina de débito
  voucher        Float?   // Valor em voucher
  total          Float    // Total da transação (obrigatório)
  numeroPessoas  Int?     // Número de pessoas na transação
  movimentacao   Movimentacoes?

  @@map("entrada")
}


model Movimentacoes {
  id             Int      @id @default(autoincrement())
  date           DateTime @default(now())
  description    String?
  account        ACCOUNT? // Relacionado a Despesas
  amount         Float
  status         STATUS?  // Relacionado a Despesas
  tipo           TipoMovimentacao // ENTRADA ou SAIDA
  entradaId      Int?     @unique  // Relacionamento com Entrada (se for uma entrada)
  despesaId      Int?     @unique  // Relacionamento com Despesas (se for uma despesa)
  entrada        Entrada? @relation(fields: [entradaId], references: [id])
  despesa        Despesas? @relation(fields: [despesaId], references: [id])
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
}